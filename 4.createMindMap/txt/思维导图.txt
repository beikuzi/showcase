思路
	出处&适用性
		在该笔记网站发现一种dot语法，可以快速出节点图
		https://www.yuque.com/yuque/gpvawt/graphviz
		像html，本身也支持html，以.dot为后缀格式
	生成思路
		建立3个文件夹，在txt下放要变思维导图的所有文本
		程序根据txt内容生成dot后，再调用system语句，dot生成png图片
	使用方法&特性
		对于每个表格，包括了当前节点和他的所有子节点。
		其中当前节点作为标题，仅保留前面若干字符，防止标题过长
		可以参考本文档的方式来使用
		通过缩进tab，比如这一行缩进数是2，那么会自动找到前面缩进比他小的，
		比如前面的"使用方法&特性"，缩进为1，本行变成他的子节点
		可以使用三个`来进行markdown的代码块语法，并且这三个`也收到缩进影响
			```
比如这样，在里面会视为一整个模块，
	此时会保留块中的格式，不受到缩进思路的影响
依靠这两种方法基本可以快速完成编写，并且简单方便
```
		记得要使用三个`来进行收尾，不然程序可能会bug
		dot本身是会识别html语法的，因此程序本身对一些符号转义了一下，
		保证不会被识别出html，但是可能并没有完成覆盖。
		（可能习惯称呼当前节点时，实际是指包括当前节点和他所有子节点的表格，请结合png具体来意会一下


---------------------------
各个模块大致讲解
	结构体stringProcess，里面有五个字符串处理函数
		```
int upLen(int len)				根据当前表格内所有文本最长的那个，计算多少个字符进行换行
string ridSuf(const string &s) 		去掉后缀，如 思维导图.jpg 	→	思维导图
string split(int len,const string &s)		根据upLen算出来的字符数len，对字符串s进行换行处理（使用\n）
string cut(int len,const string &s)		用于截取标题，防止过长（这个和上个都有考虑会卡在汉字ascii之间截断的情况）
string deal(const string &s)			将字符串s的处理转移，防止被识别出html的字符
```
	基本图论结构体graph
		使用链向式前星，头结点为head，边记作e，使用vector+resize实现动态给空间
		其中出度out用来判断出度，也就是还有没有子节点，没有就不用往后延伸了
	dot语法结构体DOT
		用于生成DOT头尾、以及边edge和节点node所需要的语句
	生成思维导图结构体mindMap
		string codeblock(ifstream &fin) 	将多行代码块转为一个普通的string语句
		void bfs(const unique_ptr<graph> &g, map<int, string> &pId, ofstream &fout)		广度遍历，输出dot语句的主要函数
		void txtToPng(const int &fileId, const string &fileName)	对于当前的文本fileName，以缩进和代码快的形式读入整个文档，并给每一个字符串读入，分配编号和记录缩进数，即预处理，完成后交由bfs函数进行总的输出。
		
		
---------------------------
总体大致讲解
	```
	首先程序会扫txt文件夹下所有的文件，用队列que记录名字后，将他们交由mindMap::txtToPng来进行转思维导图
	其中引入了多线程，因为每个文件之间的读写、处理并没有任何的交集，使用多线程能显著加快速度
	进入mindMap::txtToPng函数后，尝试读写文件，如果成功，将分配结构体graph给他
	进行读入、记录语句编号、记录缩进数等预处理后，交由bfs函数
	即，顺序方式读入（深搜），广度方式处理输出
	进入bfs后开始主要输出，广搜，每个节点遍历两次子节点，第一遍借助出度，判断子节点有没有必要入光搜队列和连边，第二遍构建当前节点。（因为，dot语言中，表格是需要一整句语句的，但是要广搜一边才能得到所有子节点）
	bfs结束后调用system将dot转png，至此完全结束
```		
		
